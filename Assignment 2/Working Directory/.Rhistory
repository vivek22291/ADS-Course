plot(leaps, scale="adjr2")
plot(leaps, scale="bic")
null=lm(kWh~1, data=df)
null
full=lm(kWh~., data=df)
full
step(null, scope=list(lower=null, upper=full),data = df, direction="forward")
step(null, scope=list(lower=null, upper=full),data = df, direction="backward")
step(null, scope=list(lower=null, upper=full),data = df, direction="both")
#implement linear multiple regression using different predictors
lm.fit=lm(kWh~ ., data=train)  #all columns
summary(lm.fit)
lm.fit<-lm(kWh ~ Month+Day+hour+peakHour+Sea_Level_PressureIn+Weekday+Day.of.Week,data = train) #Multiple R-squared:  0.511,	Adjusted R-squared:  0.5105
lm.fit=lm(kWh ~ Month + Day + Weekday + peakHour + Dew_PointF + Humidity, data = train) #Multiple R-squared:  0.5309,	Adjusted R-squared:  0.5304
lm.fit<-lm(kWh ~ Month+Day+hour+Dew_PointF + Humidity + Sea_Level_PressureIn + VisibylityMPH,data = train) #Multiple R-squared:  0.05617,	Adjusted R-squared:  0.05515
lm.fit<-lm(kWh ~ Month+Day+hour+peakHour+Temperature+Weekday+Day.of.Week+Wind_SpeedMPH, data = train) #Multiple R-squared:  0.05617,	Adjusted R-squared:  0.05515
lm.fit<-lm(kWh ~ Day+Temperature+Humidity+peakHour+Weekday+Month+Day.of.Week,data = train)
lm.fit<-lm(kWh ~ Sea_Level_PressureIn + Dew_PointF + hour + Day + Temperature + Humidity + peakHour + Weekday + Month + Day.of.Week, data = train) #Multiple R-squared:  0.5688,	Adjusted R-squared:  0.5682
summary(lm.fit)
#Predict the test data
pred = predict(lm.fit, test)
test$kWh
output<-accuracy(pred, train$kWh)
test$prd
predictionInput <- (file="C:\\Users\\Vivek\\Desktop\\ADS\\Assignments\\ADS-Course\\Assignment 2\\forecastData.csv", header=TRUE, sep=",")
predictionInput <- read.csv(file="C:\\Users\\Vivek\\Desktop\\ADS\\Assignments\\ADS-Course\\Assignment 2\\forecastData.csv", header=TRUE, sep=",")
View(predictionInput)
View(df)
summary(predictionInput)
predictionInput = na.omit(predictionInput)
predictionInput <- predictionInput[ -c(1, 2, 15, 16, 17)]
View(predictionInput)
predict = predict(lm.fit, predictionInput)
View(predictionInput)
predict1 = predict(lm.fit, predictionInput)
pred = predict(lm.fit, test)
lm.fit<-lm(kWh ~ Sea_Level_PressureIn + Dew_PointF + hour + day + Temperature + Humidity + peakHour + Weekday + Month + Day.of.Week, data = train) #Multiple R-squared:  0.5688,	Adjusted R-squared:  0.5682
View(df)
predictionInput <- read.csv(file="C:\\Users\\Vivek\\Desktop\\ADS\\Assignments\\ADS-Course\\Assignment 2\\forecastData.csv", header=TRUE, sep=",")
colnames(predictionInput)[4] <- "Day"
summary(predictionInput)
predictionInput = na.omit(predictionInput)
predictionInput <- predictionInput[ -c(1, 2, 15, 16, 17)]
predict1 = predict(lm.fit, predictionInput)
View(test)
View(predictionInput)
predictionInput <- read.csv(file="C:\\Users\\Vivek\\Desktop\\ADS\\Assignments\\ADS-Course\\Assignment 2\\forecastData.csv", header=TRUE, sep=",")
colnames(predictionInput)[4] <- "Day"
colnames(predictionInput)[10] <- "Temperature"
summary(predictionInput)
predictionInput = na.omit(predictionInput)
predictionInput <- predictionInput[ -c(1, 2, 15, 16, 17)]
predict1 = predict(lm.fit, predictionInput)
View(df)
predictionInput <- read.csv(file="C:\\Users\\Vivek\\Desktop\\ADS\\Assignments\\ADS-Course\\Assignment 2\\forecastData.csv", header=TRUE, sep=",")
colnames(predictionInput)[4] <- "Day"
colnames(predictionInput)[10] <- "Temperature"
colnames(predictionInput)[9] <- "peakHour"
summary(predictionInput)
predictionInput = na.omit(predictionInput)
predictionInput <- predictionInput[ -c(1, 2, 15, 16, 17)]
predict1 = predict(lm.fit, predictionInput)
View(df)
View(df)
predictionInput <- read.csv(file="C:\\Users\\Vivek\\Desktop\\ADS\\Assignments\\ADS-Course\\Assignment 2\\forecastData.csv", header=TRUE, sep=",")
colnames(predictionInput)[4] <- "Day"
colnames(predictionInput)[10] <- "Temperature"
colnames(predictionInput)[9] <- "peakHour"
colnames(predictionInput)[3] <- "Month"
summary(predictionInput)
predictionInput = na.omit(predictionInput)
predictionInput <- predictionInput[ -c(1, 2, 15, 16, 17)]
predict1 = predict(lm.fit, predictionInput)
testDataAccuracy <- accuracy(pred, train$kWh)
testDataAccuracy <- accuracy(pred, testDataAccuracy$kWh)
testDataAccuracy <- accuracy(predict1, testDataAccuracy$kWh)
predict1 = predict(lm.fit, predictionInput)
predict1
predict1$kWh
summary(predict1)
predictionAccuracy <- accuracy(predict1, predict1$kWh)
dataframe[,"kWh"] <- NA
predictionInput <- read.csv(file="C:\\Users\\Vivek\\Desktop\\ADS\\Assignments\\ADS-Course\\Assignment 2\\forecastData.csv", header=TRUE, sep=",")
colnames(predictionInput)[4] <- "Day"
colnames(predictionInput)[10] <- "Temperature"
colnames(predictionInput)[9] <- "peakHour"
colnames(predictionInput)[3] <- "Month"
namevector <- c("kWh")
predictionInput[,namevector] <- NA
View(predictionInput)
predictionInput <- read.csv(file="C:\\Users\\Vivek\\Desktop\\ADS\\Assignments\\ADS-Course\\Assignment 2\\forecastData.csv", header=TRUE, sep=",")
colnames(predictionInput)[4] <- "Day"
colnames(predictionInput)[10] <- "Temperature"
colnames(predictionInput)[9] <- "peakHour"
colnames(predictionInput)[3] <- "Month"
namevector <- c("kWh")
predictionInput[,namevector] <- NA
summary(predictionInput)
predictionInput = na.omit(predictionInput)
predictionInput <- predictionInput[ -c(1, 2, 15, 16, 17)]
View(predictionInput)
predictionInput <- read.csv(file="C:\\Users\\Vivek\\Desktop\\ADS\\Assignments\\ADS-Course\\Assignment 2\\forecastData.csv", header=TRUE, sep=",")
colnames(predictionInput)[4] <- "Day"
colnames(predictionInput)[10] <- "Temperature"
colnames(predictionInput)[9] <- "peakHour"
colnames(predictionInput)[3] <- "Month"
namevector <- c("kWh")
predictionInput[,namevector] <- NA
summary(predictionInput)
# predictionInput = na.omit(predictionInput)
predictionInput <- predictionInput[ -c(1, 2, 15, 16, 17)]
View(predictionInput)
predict1 = predict(lm.fit, predictionInput)
summary(predict1)
predictionInput$kWh
source('C:/Users/Vivek/Desktop/ADS/Assignments/ADS-Course/Assignment 2/Part 2.R', echo=TRUE)
predictionInput <- read.csv(file="C:\\Users\\Vivek\\Desktop\\ADS\\Assignments\\ADS-Course\\Assignment 2\\forecastData.csv", header=TRUE, sep=",")
colnames(predictionInput)[4] <- "Day"
colnames(predictionInput)[10] <- "Temperature"
colnames(predictionInput)[9] <- "peakHour"
colnames(predictionInput)[3] <- "Month"
# namevector <- c("kWh")
# predictionInput[,namevector] <- NA
summary(predictionInput)
# predictionInput = na.omit(predictionInput)
predictionInput <- predictionInput[ -c(1, 2, 15, 16, 17)]
predictionInput
predictionInput <- read.csv(file="C:\\Users\\Vivek\\Desktop\\ADS\\Assignments\\ADS-Course\\Assignment 2\\forecastData.csv", header=TRUE, sep=",")
predictionInput = na.omit(predictionInput)
colnames(predictionInput)[4] <- "Day"
colnames(predictionInput)[10] <- "Temperature"
colnames(predictionInput)[9] <- "peakHour"
colnames(predictionInput)[3] <- "Month"
namevector <- c("kWh")
predictionInput[,namevector] <- NA
summary(predictionInput)
predictionInput <- predictionInput[ -c(1, 2, 15, 16, 17)]
predictionInput
predictionInput <- read.csv(file="C:\\Users\\Vivek\\Desktop\\ADS\\Assignments\\ADS-Course\\Assignment 2\\forecastData.csv", header=TRUE, sep=",")
predictionInput = na.omit(predictionInput)
colnames(predictionInput)[4] <- "Day"
colnames(predictionInput)[10] <- "Temperature"
colnames(predictionInput)[9] <- "peakHour"
colnames(predictionInput)[3] <- "Month"
namevector <- c("kWh")
predictionInput[,namevector] <- NA
summary(predictionInput)
predictionInput <- predictionInput[ -c(1, 2, 15, 16, 17)]
predict1 = predict(lm.fit, predictionInput$kWh)
source('C:/Users/Vivek/Desktop/ADS/Assignments/ADS-Course/Assignment 2/Part 2.R', echo=TRUE)
View(df)
View(predictionInput)
predictionInput <- read.csv(file="C:\\Users\\Vivek\\Desktop\\ADS\\Assignments\\ADS-Course\\Assignment 2\\forecastData.csv", header=TRUE, sep=",")
predictionInput = na.omit(predictionInput)
colnames(predictionInput)[4] <- "Day"
colnames(predictionInput)[10] <- "Temperature"
colnames(predictionInput)[9] <- "peakHour"
colnames(predictionInput)[3] <- "Month"
# namevector <- c("kWh")
# predictionInput[,namevector] <- NA
summary(predictionInput)
View(predictionInput)
predictionInput <- predictionInput[ -c(1, 2, 15, 16, 17)]
lm.fit<-lm(kWh ~ Sea_Level_PressureIn + Dew_PointF + hour + day + Temperature + Humidity + peakHour + Weekday + Month + Day.of.Week, data = train) #Multiple R-squared:  0.5688,	Adjusted R-squared:  0.5682
summary(lm.fit)
predict1 = predict(lm.fit, newdata = predictionInput)
summary(predict1)
predictionInput$kWh
predictionAccuracy <- accuracy(predict1, predict1$kWh)
predict(lm.fit, newdata = predictionInput)
type(predict1)
typeof(predict1)
summary(predict1)
predictionOutput <- predictionInput
predictionOutput["kWh"] <- predict1
predictionOutput
predictionOutput$date <- as.Date(with(predictionOutput, paste(year, Month, Day,sep="-")), "%Y-%m-%d")
predictionOutput
predictionOutput
forecastOutput <- forecastOutput[-c(1:3, 5:7, 9:13)]
forecastOutput <- predictionOutput[-c(1:3, 5:7, 9:13)]
forecastOutput
forecastOutput <- forecastOutput[c(4,1,2,3)]
forecastOutput
summary(forecastOutput)
summary(predict1)
predict1 = predict(lm.fit, newdata = predictionInput)
summary(predict1)
summary(predictionInput)
df <- read.csv(file="C:\\Users\\Vivek\\Desktop\\ADS\\Assignments\\ADS-Course\\Assignment 2\\WeatherDataFinal.csv", header=TRUE, sep=",")
summary(df)
df = na.omit(df)
df <- df[ -c(1, 2, 16, 17, 18)]
#Divide the data set into train and test
#75% of the sample size
smp_size <- floor(0.75 * nrow(df))
#Set the seed to make your partition reproductible
set.seed(123)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
#Split the data into training and testing
train <- df[train_ind, ]
test <- df[-train_ind, ]
summary(df)
df = na.omit(df)
df <- df[ -c(1, 2, 16, 17, 18)]
#Divide the data set into train and test
#75% of the sample size
smp_size <- floor(0.75 * nrow(df))
#Set the seed to make your partition reproductible
set.seed(123)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
#Split the data into training and testing
train <- df[train_ind, ]
test <- df[-train_ind, ]
##### Searching all subset models up to size number of variables
regfit.full=regsubsets (kWh~Dew_PointF + hour + Day + Temperature + Humidity + peakHour + Weekday + Month + Day.of.Week,data=train ,nvmax=11)
reg.summary =summary (regfit.full)
names(reg.summary)
reg.summary$rss
reg.summary$adjr2
par(mfrow=c(2,2))
plot(reg.summary$rss ,xlab="Number of Variables ",ylab="RSS", type="l")
plot(reg.summary$adjr2 ,xlab="Number of Variables ", ylab="Adjusted RSq",type="l")
coef(regfit.full ,6)
#### Forward selection
regfit.fwd=regsubsets(kWh~ Dew_PointF + hour + Day + Temperature + Humidity + peakHour + Weekday + Month + Day.of.Week, data=train ,nvmax=11, method="forward")
F=summary(regfit.fwd)
names(F)
F
F$rss
F$adjr2
coef(regfit.fwd,6)
#### Backward selection
regfit.bwd=regsubsets(kWh~ Dew_PointF + hour + Day + Temperature + Humidity + peakHour + Weekday + Month + Day.of.Week,data=train ,nvmax=11, method="backward")
B=summary(regfit.bwd)
names(B)
B
B$rss
B$adjr2
coef(regfit.bwd,6)
#Exhaustive Search
leaps=regsubsets(kWh~Dew_PointF + hour + Day + Temperature + Humidity + peakHour + Weekday + Month + Day.of.Week,data=train, nbest=12)
plot(leaps, scale="adjr2")
plot(leaps, scale="bic")
null=lm(kWh~1, data=df)
null
full=lm(kWh~., data=df)
full
step(null, scope=list(lower=null, upper=full),data = df, direction="forward")
step(null, scope=list(lower=null, upper=full),data = df, direction="backward")
step(null, scope=list(lower=null, upper=full),data = df, direction="both")
#Read the CSV File
df <- read.csv(file="C:\\Users\\Vivek\\Desktop\\ADS\\Assignments\\ADS-Course\\Assignment 2\\WeatherDataFinal.csv", header=TRUE, sep=",")
summary(df)
df = na.omit(df)
df <- df[ -c(1, 2, 16, 17, 18)]
#Divide the data set into train and test
#75% of the sample size
smp_size <- floor(0.75 * nrow(df))
#Set the seed to make your partition reproductible
set.seed(123)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
#Split the data into training and testing
train <- df[train_ind, ]
test <- df[-train_ind, ]
##### Searching all subset models up to size number of variables
regfit.full=regsubsets (kWh~Dew_PointF + hour + Day + Temperature + Humidity + peakHour + Weekday + Month + Day.of.Week,data=train ,nvmax=11)
reg.summary =summary (regfit.full)
names(reg.summary)
reg.summary$rss
reg.summary$adjr2
par(mfrow=c(2,2))
plot(reg.summary$rss ,xlab="Number of Variables ",ylab="RSS", type="l")
plot(reg.summary$adjr2 ,xlab="Number of Variables ", ylab="Adjusted RSq",type="l")
coef(regfit.full ,6)
#### Forward selection
regfit.fwd=regsubsets(kWh~ Dew_PointF + hour + Day + Temperature + Humidity + peakHour + Weekday + Month + Day.of.Week, data=train ,nvmax=11, method="forward")
F=summary(regfit.fwd)
names(F)
F
F$rss
F$adjr2
coef(regfit.fwd,6)
#### Backward selection
regfit.bwd=regsubsets(kWh~ Dew_PointF + hour + Day + Temperature + Humidity + peakHour + Weekday + Month + Day.of.Week,data=train ,nvmax=11, method="backward")
B=summary(regfit.bwd)
names(B)
B
B$rss
B$adjr2
coef(regfit.bwd,6)
#Exhaustive Search
leaps=regsubsets(kWh~Dew_PointF + hour + Day + Temperature + Humidity + peakHour + Weekday + Month + Day.of.Week,data=train, nbest=12)
plot(leaps, scale="adjr2")
plot(leaps, scale="bic")
null=lm(kWh~1, data=df)
null
full=lm(kWh~., data=df)
full
step(null, scope=list(lower=null, upper=full),data = df, direction="forward")
step(null, scope=list(lower=null, upper=full),data = df, direction="backward")
step(null, scope=list(lower=null, upper=full),data = df, direction="both")
#implement linear multiple regression using different predictors
lm.fit=lm(kWh~ ., data=train)  #all columns
summary(lm.fit)
lm.fit<-lm(kWh ~ Month+Day+hour+peakHour+Sea_Level_PressureIn+Weekday+Day.of.Week,data = train) #Multiple R-squared:  0.511,	Adjusted R-squared:  0.5105
lm.fit=lm(kWh ~ Month + Day + Weekday + peakHour + Dew_PointF + Humidity, data = train) #Multiple R-squared:  0.5309,	Adjusted R-squared:  0.5304
lm.fit<-lm(kWh ~ Month+Day+hour+Dew_PointF + Humidity + Sea_Level_PressureIn + VisibylityMPH,data = train) #Multiple R-squared:  0.05617,	Adjusted R-squared:  0.05515
lm.fit<-lm(kWh ~ Month+Day+hour+peakHour+Temperature+Weekday+Day.of.Week+Wind_SpeedMPH, data = train) #Multiple R-squared:  0.05617,	Adjusted R-squared:  0.05515
lm.fit<-lm(kWh ~ Day+Temperature+Humidity+peakHour+Weekday+Month+Day.of.Week,data = train)
lm.fit<-lm(kWh ~ Sea_Level_PressureIn + Dew_PointF + hour + day + Temperature + Humidity + peakHour + Weekday + Month + Day.of.Week, data = train) #Multiple R-squared:  0.5688,	Adjusted R-squared:  0.5682
summary(lm.fit)
#Predict the test data
pred = predict(lm.fit, test)
testDataAccuracy <- accuracy(pred, train$kWh)
predictionInput <- read.csv(file="C:\\Users\\Vivek\\Desktop\\ADS\\Assignments\\ADS-Course\\Assignment 2\\forecastData.csv", header=TRUE, sep=",")
#cleaning the data
predictionInput = na.omit(predictionInput)
colnames(predictionInput)[4] <- "Day"
colnames(predictionInput)[10] <- "Temperature"
colnames(predictionInput)[9] <- "peakHour"
colnames(predictionInput)[3] <- "Month"
View(predictionInput)
summary(predictionInput)
predictionInput <- predictionInput[ -c(1, 2, 15, 16, 17)]
View(predictionInput)
predict1 = predict(lm.fit, newdata = predictionInput)
summary(predict1)
predictionOutput <- predictionInput
predictionOutput["kWh"] <- predict1
View(predictionOutput)
predictionOutput$date <- as.Date(with(predictionOutput, paste(year, Month, Day,sep="-")), "%Y-%m-%d")
predictionOutput$date
forecastOutput <- predictiontOutput[-c(1:3, 5:7, 9:13)]
predictionOutput$date <- as.Date(with(predictionOutput, paste(year, Month, Day,sep="-")), "%Y-%m-%d")
forecastOutput <- predictiontOutput[-c(1:3, 5:7, 9:13)]
forecastOutput <- predictionOutput[-c(1:3, 5:7, 9:13)]
forecastOutput$kWh
summary(forecastOutput)
View(forecastOutput)
predictionOutput$date <- as.Date(with(predictionOutput, paste(year, Month, Day,sep="-")), "%Y-%m-%d")
predictionOutput$date
forecastOutput <- predictionOutput[-c(1:3, 5:7, 9:13)]
forecastOutput <- forecastOutput[c(4,1,2,3)]
summary(forecastOutput)
forecastOutput$kWh
forecastOutput
forecastOutput$kWh
forecastOutput$kWh
forecastOutput
View(df)
write.csv(forecastOutput, "C:\\Users\\Vivek\\Desktop\\ADS\\Assignments\\ADS-Course\\Assignment 2\\forecastOutput_26908650026.csv ")
a
forecastOutput <- forecastOutput[c(4,1,2,3)]
View(test)
df <- read.csv(file="sampleformat.csv", header=TRUE, sep=",")
summary(df)
library(MASS)
library(ISLR)
install.packages('forecast')
library(forecast)
install.packages("leaps")
library(leaps)
install.packages("xlsx", dependencies = TRUE)
library(xlsx)
df <- read.csv(file="sampleformat.csv", header=TRUE, sep=",")
setwd("C:/Users/Vivek/Desktop/ADS/Assignments/ADS-Course/Assignment 2/Working Directory")
df <- read.csv(file="sampleformat.csv", header=TRUE, sep=",")
View(df)
df <- read.csv(file="sampleformat.csv", header=TRUE, sep=",")
summary(df)
df = na.omit(df)
df <- df[ -c(1, 2, 16, 17, 18)]
#Divide the data set into train and test
#75% of the sample size
smp_size <- floor(0.75 * nrow(df))
#Set the seed to make your partition reproductible
set.seed(1000)
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
#Split the data into training and testing
train <- df[train_ind, ]
test <- df[-train_ind, ]
##### Searching all subset models up to size number of variables
regfit.full=regsubsets (kWh~.,data=train ,nvmax=11)
reg.summary =summary (regfit.full)
names(reg.summary)
reg.summary$rss
reg.summary$adjr2
par(mfrow=c(2,2))
plot(reg.summary$rss ,xlab="Number of Variables ",ylab="RSS", type="l")
plot(reg.summary$adjr2 ,xlab="Number of Variables ", ylab="Adjusted RSq",type="l")
coef(regfit.full ,6)
#### Forward selection
regfit.fwd=regsubsets(kWh~ ., data=train ,nvmax=11, method="forward")
F=summary(regfit.fwd)
names(F)
F
F$rss
F$adjr2
coef(regfit.fwd,6)
#### Backward selection
regfit.bwd=regsubsets(kWh~ .,data=train ,nvmax=11, method="backward")
B=summary(regfit.bwd)
names(B)
B
B$rss
B$adjr2
coef(regfit.bwd,6)
#Exhaustive Search
leaps=regsubsets(kWh~.,data=train, nbest=12)
plot(leaps, scale="adjr2")
plot(leaps, scale="bic")
null=lm(kWh~1, data=df)
null
full=lm(kWh~., data=df)
full
step(null, scope=list(lower=null, upper=full),data = df, direction="forward")
step(null, scope=list(lower=null, upper=full),data = df, direction="backward")
step(null, scope=list(lower=null, upper=full),data = df, direction="both")
##### Searching all subset models up to size number of variables
regfit.full=regsubsets (kWh~.,data=train ,nvmax=11)
reg.summary =summary (regfit.full)
names(reg.summary)
reg.summary$rss
reg.summary$adjr2
par(mfrow=c(2,2))
plot(reg.summary$rss ,xlab="Number of Variables ",ylab="RSS", type="l")
plot(reg.summary$adjr2 ,xlab="Number of Variables ", ylab="Adjusted RSq",type="l")
coef(regfit.full ,6)
#### Forward selection
regfit.fwd=regsubsets(kWh~ ., data=train ,nvmax=11, method="forward")
F=summary(regfit.fwd)
names(F)
F
F$rss
F$adjr2
coef(regfit.fwd,6)
#### Backward selection
regfit.bwd=regsubsets(kWh~ .,data=train ,nvmax=11, method="backward")
B=summary(regfit.bwd)
names(B)
B
B$rss
B$adjr2
coef(regfit.bwd,6)
Exhaustive Search
leaps=regsubsets(kWh~.,data=train, nbest=12)
plot(leaps, scale="adjr2")
plot(leaps, scale="bic")
null=lm(kWh~1, data=df)
null
full=lm(kWh~., data=df)
full
step(null, scope=list(lower=null, upper=full),data = df, direction="forward")
step(null, scope=list(lower=null, upper=full),data = df, direction="backward")
step(null, scope=list(lower=null, upper=full),data = df, direction="both")
lm.fit<-lm(kWh ~ Dew_PointF + hour + Day + Temperature + Humidity + peakHour + Weekday + Month + Day.of.Week, data = train) #Multiple R-squared:  0.5688,	Adjusted R-squared:  0.5682
summary(lm.fit)
lm.fit=lm(kWh~ ., data=train)  #all columns
summary(lm.fit)
lm.fit<-lm(kWh ~ Dew_PointF + hour + Day + Temperature + Humidity + peakHour + Weekday + Month + Day.of.Week, data = train) #Multiple R-squared:  0.5688,	Adjusted R-squared:  0.5682
summary(lm.fit)
#Export the regression outputs to external file
regressionOutput <- summary(lm.fit)$coefficients
write.xlsx(regressionOutput, "Regression_Coefficients.xlsx")
regressionCoefficients_df <- read.xlsx("Regression_Coefficients.xlsx", sheetIndex = 1)
regressionOutput_df <- regressionCoefficients_df[ -c(2,3,5)]
unlink("Regression_Coefficients.xlsx", recursive = FALSE, force = FALSE)
write.csv(regressionOutput_df, "RegressionOutputs.csv")
#Predict the test data
pred = predict(lm.fit, test)
testDataAccuracy <- accuracy(pred, train$kWh)
#Export Perforance matrix of model to external file
write.csv(testDataAccuracy, "PerformanceMatrix.csv")
#Part 3: Forecasting
#read the forecasting data by importing it
predictionInput <- read.csv(file="forecastData.csv", header=TRUE, sep=",")
#cleaning the data
predictionInput = na.omit(predictionInput)
colnames(predictionInput)[4] <- "Day"
colnames(predictionInput)[10] <- "Temperature"
colnames(predictionInput)[9] <- "peakHour"
colnames(predictionInput)[3] <- "Month"
summary(predictionInput)
predictionInput <- predictionInput[ -c(1, 2, 15, 16, 17)]
#extract the required columns
predictionOutput <- predictionInput
predictionOutput["kWh"] <- predict1
predictionOutput$date <- as.Date(with(predictionOutput, paste(year, Month, Day,sep="-")), "%Y-%m-%d")
predictionOutput$date
forecastOutput <- predictionOutput[-c(1:3, 5:7, 9:13)]
forecastOutput <- forecastOutput[c(4,1,2,3)]
summary(forecastOutput)
#Export forecasted data to external file
write.csv(forecastOutput, "forecastOutput_Account_26908650026.csv ")
forecastOutput <- predictionOutput[-c(1:3, 5:7, 9:13)]
forecastOutput <- forecastOutput[c(4,1,2,3)]
View(forecastOutput)
predict1 = predict(lm.fit, newdata = predictionInput)
summary(predict1)
predictionOutput <- predictionInput
View(predictionOutput)
predictionOutput["kWh"] <- predict1
View(predictionOutput)
predictionOutput$date <- as.Date(with(predictionOutput, paste(year, Month, Day,sep="-")), "%Y-%m-%d")
predictionOutput$date
forecastOutput <- predictionOutput[-c(1:3, 5:7, 9:13)]
forecastOutput <- forecastOutput[c(4,1,2,3)]
summary(forecastOutput)
forecastOutput
#Export forecasted data to external file
write.csv(forecastOutput, "forecastOutput_Account_26908650026.csv ")
